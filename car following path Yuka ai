import * as THREE from "three";
import { OrbitControls } from "three/addons/controls/OrbitControls.js";
import * as CANNON from "cannon-es";
import { RGBELoader } from "three/examples/jsm/loaders/RGBELoader.js";
import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader.js";
import { FlyControls } from "three/addons/controls/FlyControls.js";
import gsap from "gsap";
import * as SkeletonUtils from "three/addons/utils/SkeletonUtils.js";
import * as Yuka from 'yuka'
import { label } from "three/src/nodes/TSL.js";
// *------- Mains --------* //

const clock = new THREE.Clock();

const renderer = new THREE.WebGLRenderer({ antialias: true });
renderer.setSize(window.innerWidth, window.innerHeight);
renderer.setPixelRatio(window.innerWidth / window.innerHeight);
document.body.appendChild(renderer.domElement);

const scene = new THREE.Scene();

const ambientLight = new THREE.AmbientLight(0xffffff, 10);
scene.add(ambientLight);

const camera = new THREE.PerspectiveCamera(
  75,
  window.innerWidth / window.innerHeight,
  0.1,
  1000
);
camera.position.set(4, 3, 6);
scene.add(camera);

const controls = new OrbitControls(camera, renderer.domElement);
controls.enableDamping = true;

// *------- Mains Ends --------* //


const vehicle = new Yuka.Vehicle();
const loader= new GLTFLoader()
let vehicleMesh;
loader.load('./Car.glb',(gltf)=>{
  console.log('inside loader')
  vehicleMesh = gltf.scene;
   vehicleMesh.traverse((child) => {
     if (child.isMesh) {
       child.scale.setScalar(0.01); // or 0.001 if it's huge
     }
   }); 
  vehicleMesh.matrixAutoUpdate = false;
  scene.add(vehicleMesh);

  vehicle.setRenderComponent(vehicleMesh, sync);
})

// vehicleMesh.matrixAutoUpdate = false;
// scene.add(vehicleMesh)


// vehicle.setRenderComponent(vehicleMesh,sync)

function sync(entity, renderComponent) {
   renderComponent.matrix.copy(entity.worldMatrix)
}


const path = new Yuka.Path()
path.add(new Yuka.Vector3(-4,0,4))
path.add(new Yuka.Vector3(6, 0, 0));
path.add(new Yuka.Vector3(-4, 0, -4));
path.add(new Yuka.Vector3(0, 0, 0));
path.add(new Yuka.Vector3(4, 0, -4));
path.add(new Yuka.Vector3(6, 0, 0));
path.add(new Yuka.Vector3(4, 0, 4));
path.add(new Yuka.Vector3(0, 0, 6));

vehicle.position.copy(path.current())

const followPathBehaviour = new Yuka.FollowPathBehavior(path,0.05)
vehicle.steering.add(followPathBehaviour)
const entityManager = new Yuka.EntityManager();
entityManager.add(vehicle)

const positions  =[]
for(let i =0;i<path._waypoints.length;i++){
  const wy = path._waypoints[i];
  positions.push(wy.x,wy.y,wy.z);
}

const lineGeometry = new THREE.BufferGeometry();
lineGeometry.setAttribute('position',new THREE.Float32BufferAttribute(positions,3));


const lineMaterial = new THREE.LineBasicMaterial({color:'white'});


const lines = new THREE.LineLoop(lineGeometry, lineMaterial);
scene.add(lines)


const time = new Yuka.Time();
// *--------- FOOTER ----------* //
window.addEventListener("resize", () => {
  camera.aspect = window.innerWidth / window.innerHeight;
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.setPixelRatio(Math.min(window.innerWidth / window.innerHeight, 2));
  camera.updateProjectionMatrix();
});

const animate = () => {
  const delta = clock.getDelta();
  const dt = time.update().getDelta();
  entityManager.update(dt)
  controls.update(delta);
  renderer.render(scene, camera);
};

renderer.setAnimationLoop(animate);
