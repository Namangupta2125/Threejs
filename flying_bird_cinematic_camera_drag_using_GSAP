import * as THREE from "three";
import { OrbitControls } from "three/addons/controls/OrbitControls.js";
import * as CANNON from "cannon-es";
import { RGBELoader } from "three/examples/jsm/loaders/RGBELoader.js";
import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader.js";
import { FlyControls } from "three/addons/controls/FlyControls.js";
import gsap from "gsap";
import * as SkeletonUtils from "three/addons/utils/SkeletonUtils.js";

// *------- Mains --------* //

const clock = new THREE.Clock();

const renderer = new THREE.WebGLRenderer({ antialias: true });
renderer.setSize(window.innerWidth, window.innerHeight);
renderer.setPixelRatio(window.innerWidth / window.innerHeight);
document.body.appendChild(renderer.domElement);

const scene = new THREE.Scene();

const ambientLight = new THREE.AmbientLight(0xffffff, 10);
scene.add(ambientLight);

const camera = new THREE.PerspectiveCamera(
  75,
  window.innerWidth / window.innerHeight,
  0.1,
  1000
);
camera.position.set(4, 3, 6);
scene.add(camera);

const controls = new OrbitControls(camera, renderer.domElement);
controls.enableDamping = true;

// *------- Mains Ends --------* //

const tl = gsap.timeline()
const axeshelper  = new THREE.AxesHelper(1000);
// scene.add(axeshelper)
const mixers = [];

const loader = new GLTFLoader();
loader.load("./phoenix_bird/scene.gltf", (gltf) => {
  gltf.scene.scale.setScalar(0.01);
//   gltf.scene.position.set(0, 100, 0);
  scene.add(gltf.scene);

  const mixerMain = new THREE.AnimationMixer(gltf.scene);
  mixers.push(mixerMain);
  gltf.animations.forEach((clip) => mixerMain.clipAction(clip).play());

  const clone1 = SkeletonUtils.clone(gltf.scene);
  clone1.position.set(4, 1, -8);
  scene.add(clone1);

  const mixer1 = new THREE.AnimationMixer(clone1);
  mixers.push(mixer1);
  gltf.animations.forEach((clip) => mixer1.clipAction(clip).play());

  const clone2 = SkeletonUtils.clone(gltf.scene);
  clone2.position.set(-2, 4, -6);
  scene.add(clone2);

  const mixer2 = new THREE.AnimationMixer(clone2);
  mixers.push(mixer2);
  gltf.animations.forEach((clip) => mixer2.clipAction(clip).play());

  const center = new THREE.Vector3().add(gltf.scene.position).add(clone1.position).add(clone2.position).divideScalar(3)
  controls.target.copy(center)

});


window.addEventListener('mousedown',()=>{
   tl.to(camera.position, {
     x: -10,
     z: 0,
     y: 10,
     duration: 5,
   })
     .to(camera.position, {
       x: 0,
       z: -14,
       y: 6,
       duration: 5,
     })
     .to(camera.position, {
       x: 10,
       z: -14,
       y: 6,
       duration: 5,
     });
})

window.addEventListener("resize", () => {
  camera.aspect = window.innerWidth / window.innerHeight;
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.setPixelRatio(Math.min(window.innerWidth / window.innerHeight, 2));
  camera.updateProjectionMatrix();
});

const animate = () => {
  const delta = clock.getDelta();
  mixers.forEach((m) => m.update(delta));
  controls.update(delta);
  renderer.render(scene, camera);
};

renderer.setAnimationLoop(animate);
