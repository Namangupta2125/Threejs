import * as THREE from 'three'
import { OrbitControls } from "three/addons/controls/OrbitControls.js";
import * as CANNON from "cannon-es"


// *------- Mains --------* //



// clock
const clock = new THREE.Clock()

// renderer
const renderer = new THREE.WebGLRenderer({antialias:true});
renderer.setSize(window.innerWidth,window.innerHeight)
renderer.setPixelRatio(window.innerWidth/window.innerHeight)
document.body.appendChild(renderer.domElement)


//scene
const scene = new THREE.Scene()

//ambientLight
const ambientLight = new THREE.AmbientLight(0xffffff,2)
scene.add(ambientLight)

//camera
const camera = new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,0.1,1000)
camera.position.set(0,5,10)
scene.add(camera)

//controls
const controls = new OrbitControls(camera,renderer.domElement)
controls.enableDamping = true

// *------- Mains Ends --------* //

// ground and mesh matching array
const objects = []

//fixedtime
const fixedtime =1/60

const world = new CANNON.World({gravity: new CANNON.Vec3(0,-9.81,0)});
const groundBody = new CANNON.Body({
   mass:0,
   shape:new CANNON.Box(new CANNON.Vec3(5,0.03,5)),
   material:new CANNON.Material()
})
world.addBody(groundBody);

const ground = new THREE.Mesh(new THREE.BoxGeometry(10,0.05,10),new THREE.MeshStandardMaterial({color:'white'}))
scene.add(ground)


objects.push([groundBody,ground])




// adding creation of balls on mouse click
const mouse = new THREE.Vector2();
const planeNormal = new THREE.Vector3();
const raycaster = new THREE.Raycaster();
const plane = new THREE.Plane();
const intersectionPoint = new THREE.Vector3();



window.addEventListener("click", (e) => {
  // Update mouse position from click
  mouse.x = (e.clientX / window.innerWidth) * 2 - 1;
  mouse.y = -(e.clientY / window.innerHeight) * 2 + 1;

  // Recalculate plane
  planeNormal.copy(camera.position).normalize();
  plane.setFromNormalAndCoplanarPoint(planeNormal, scene.position);

  // Cast ray from mouse to 3D scene
  raycaster.setFromCamera(mouse, camera);
  raycaster.ray.intersectPlane(plane, intersectionPoint);

  // Create sphere at intersection point
  const mesh = new THREE.Mesh(
    new THREE.SphereGeometry(0.2),
    new THREE.MeshPhysicalMaterial({ color: getRandomHexColor() })
  );
  mesh.position.copy(intersectionPoint); 
  scene.add(mesh);

  const meshPhysics = new CANNON.Body({
   mass:1,
   shape:new CANNON.Sphere(0.2),
   material:new CANNON.Material(),
   linearDamping:0.5
  })

  meshPhysics.angularVelocity.set(0, 0, 20 * (clock.getElapsedTime() %2 == 0 ?1:-1));
  meshPhysics.position.copy(intersectionPoint)
  world.addBody(meshPhysics);
  objects.push([meshPhysics,mesh])

});





function getRandomHexColor() {
  return (
    "#" +
    Math.floor(Math.random() * 0xffffff)
      .toString(16)
      .padStart(6, "0")
  );
}


// *---------- Footer Important ---------* // 

window.addEventListener('resize',()=>{
   camera.aspect = window.innerWidth/window.innerHeight
   renderer.setSize(window.innerWidth,window.innerHeight);
   renderer.setPixelRatio(window.innerWidth/window.innerHeight);
   camera.updateProjectionMatrix()
})


//animate function
const animate = ()=>{
  world.step(fixedtime, clock.getDelta());

  objects.forEach(([groundBody,ground])=>{
      ground.position.copy(groundBody.position);
      ground.quaternion.copy(groundBody.quaternion);
  })
 

  controls.update();
  renderer.render(scene, camera);
}

renderer.setAnimationLoop(animate)
